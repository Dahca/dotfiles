# ~/.bashrc: executed by bash(1) for non-login shells.

## Some general setup

# https://sanctum.geek.nz/arabesque/better-bash-history/
shopt -s histappend
HISTFILESIZE="10000000"
HISTSIZE="99999"
HISTCONTROL="ignoreboth"
HISTIGNORE="ls:bg:fg"
HISTTIMEFORMAT="%F %T"
shopt -s cmdhist
PROMPT_COMMAND="history -a"

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# If not running interactively, don't do anything
case $- in
    *i*) ;;
      *) return;;
esac

###
#   Bash prompt definitions
###

txtblk='\e[0;30m' # Black - Regular
txtred='\e[0;31m' # Red
txtgrn='\e[0;32m' # Green
txtylw='\e[0;33m' # Yellow
txtblu='\e[0;34m' # Blue
txtpur='\e[0;35m' # Purple
txtcyn='\e[0;36m' # Cyan
txtwht='\e[0;37m' # White
bldblk='\e[1;30m' # Black - Bold
bldred='\e[1;31m' # Red
bldgrn='\e[1;32m' # Green
bldylw='\e[1;33m' # Yellow
bldblu='\e[1;34m' # Blue
bldpur='\e[1;35m' # Purple
bldcyn='\e[1;36m' # Cyan
bldwht='\e[1;37m' # White
unkblk='\e[4;30m' # Black - Underline
undred='\e[4;31m' # Red
undgrn='\e[4;32m' # Green
undylw='\e[4;33m' # Yellow
undblu='\e[4;34m' # Blue
undpur='\e[4;35m' # Purple
undcyn='\e[4;36m' # Cyan
undwht='\e[4;37m' # White
bakblk='\e[40m'   # Black - Background
bakred='\e[41m'   # Red
bakgrn='\e[42m'   # Green
bakylw='\e[43m'   # Yellow
bakblu='\e[44m'   # Blue
bakpur='\e[45m'   # Purple
bakcyn='\e[46m'   # Cyan
bakwht='\e[47m'   # White
txtrst='\e[0m'    # Text Reset

## Section for path related things

prependPath(){
  for var in "$@"; do
    if [[ "$PATH" != *"$var"* ]]
    then
      export PATH="$var:$PATH"
    else
      # remove all instances of this variable from the path
      # and then prepend - gets rid of the issue of having
      # the same thing on the path multiple times.
      sed_flag="-r"
      if [ "$(uname)" == "Darwin" ]; then
        sed_flag="-E"
      fi
      trimmed=$(echo $PATH | sed $sed_flag s,$var:?,,g)
      export PATH="$var:$trimmed"
    fi
  done
}

removePath(){
  for var in "$@"
  do
    if [[ "$PATH" == *"$var"* ]]
    then
      sed_flag="-r"
      if [ "$(uname)" == "Darwin" ]; then
        sed_flag="-E"
      fi
      trimmed=$(echo $PATH | sed $sed_flag s,:$var:?,:,g)
      trimmed=$(echo $trimmed | sed $sed_flag s,^$var:,:,)
    fi
  done
}

sbin="/usr/local/sbin"
gnubin="/usr/local/opt/coreutils/libexec/gnubin"
depottools="/Users/Ian/workspace/depot_tools"
prependPath $sbin $gnubin $depottools

## Section for bash prompt details

if [ "$(whoami)" = "root" ]; then
  a="\[$bldred\]\u@\h\[\e[m\]:\[$bldblu\]\w\[\e[m\]"
  b=" - \A \[$bldred\]#\[\e[m\] "
  export PS1=$a$b
else
  a="\[$txtgrn\]\u@\h\[\e[m\]:\[$bldblu\]\w\[\e[m\]"
  b=" - \A \[$txtylw\]$\[\e[m\] "
  export PS1=$a$b
fi

## Section for helping with terminal navigation

export LS_COLORS='di=1:fi=0:ln=31:pi=5:so=5:bd=5:cd=5:or=31:mi=0:ex=35:*.rpm=90'

## Section for running processes

notify(){
    $@
    cd ~/.textbelt_server

    echo ""
    echo "Sending sms..."
    message=$@
    curl -X POST http://textbelt.com/text \
         -d number=5126359155 \
         -d "from=$(whoami)@$(hostname)" \
         -d "message=Process '$message' completed: exit code $?"
    echo ""
}


### This is for changing a git repo's protocol

gitSwitchProtocol(){
    if [ "$1" != "https" ]
    then
        REPO_URL=`git remote -v | grep -m1 '^origin' | sed -Ene 's#.*(https://[^[:space:]]*).*#\1#p'`
        if [ -z "$REPO_URL" ]; then
            echo "-- ERROR:  Could not identify Repo url."
            echo "   It is possible this repo is already using SSH."
            return -1
        fi

        USER=`echo $REPO_URL | sed -Ene's#https://github.com/([^/]*)/(.*).git#\1#p'`
        if [ -z "$USER" ]; then
            echo "-- ERROR:  Could not identify User."
            return -1
        fi

        REPO=`echo $REPO_URL | sed -Ene's#https://github.com/([^/]*)/(.*).git#\2#p'`
        if [ -z "$REPO" ]; then
            echo "-- ERROR:  Could not identify Repo."
            return -1
        fi
        NEW_URL="git@github.com:$USER/$REPO.git"

    else
        REMOTE=${1-origin}

        REPO_URL=`git remote -v | grep -m1 "^$REMOTE" | sed -Ene's#.*(git@github.com:[^[:space:]]*).*#\1#p'`
        if [ -z "$REPO_URL" ]; then
            echo "-- ERROR:  Could not identify Repo url."
            echo "   It is possible this repo is already using HTTPS instead of SSH."
            return -1
        fi

        USER=`echo $REPO_URL | sed -Ene's#git@github.com:([^/]*)/(.*).git#\1#p'`
        if [ -z "$USER" ]; then
            echo "-- ERROR:  Could not identify User."
            return -1
        fi

        REPO=`echo $REPO_URL | sed -Ene's#git@github.com:([^/]*)/(.*).git#\2#p'`
        if [ -z "$REPO" ]; then
            echo "-- ERROR:  Could not identify Repo."
            return -1
        fi
    fi

    echo "Changing repo url from "
    echo "  '$REPO_URL'"
    echo "      to "
    echo "  '$NEW_URL'"
    echo ""

    CHANGE_CMD="git remote set-url origin $NEW_URL"
    `$CHANGE_CMD`

    echo "Success"
    return 0
}

alias -- git-switch-ssh="gitSwitchProtocol"
alias -- git-switch-https="gitSwitchProtocol https"

## Section for autocomplete

# add to ~/.bash_profile, and close/reopen a shell.  Will autocomplete any
# hosts found in known_hosts.

complete -W "$(echo `cat ~/.ssh/known_hosts | cut -f 1 -d ' ' | \
    sed -e s/,.*//g | uniq | grep -v "\["`;)" ssh
complete -W "$(echo `cat ~/.ssh/known_hosts | cut -f 1 -d ' ' | \
    sed -e s/,.*//g | uniq | grep -v "\["`;)" scp


# If set, the pattern "**" used in a pathname expansion context will
# match all files and zero or more directories and subdirectories.
shopt -s globstar
# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# enable programmable completion features
if [ -f /etc/bash_completion ] && ! shopt -oq posix; then
    . /etc/bash_completion
fi
# bash aliases
if [ -f ~/.bash_aliases ]; then
  . ~/.bash_aliases
fi

# Sourcing files that may have secrets in them or are company-specific
# and I don't want to commit to my public repo. Assumed to be in
# ~/.bash_private/..
for file in ~/.private/bash*; do
    if [ -f "$file" ]
    then
        . "$file"
    fi
done
